import pytest
import metadynminer as mm
from matplotlib import pyplot as plt
import os
import numpy as np

def test_1p():
    expected = np.array([[  0.        ,  74.        ,  -1.3253594 ],
       [  1.68468963,  28.        ,  -2.45436926],
       [  7.63558994, 167.        ,   0.95720401]])
    #load hills
    h1 = mm.Hills(name="./data/acealanme1d", periodic=[True])
    #find minima on FES
    minima = mm.Minima(mm.Fes(h1, resolution=256, original=False))
    minima = minima.minima.to_numpy()
    minima = minima[:,1:].astype(float)
    assert(np.allclose(minima, expected, 1e-3))
    
def test_1np():
    expected = np.array([[  0.        ,  86.        ,  -1.2926384 ],
       [  3.08941575,  54.        ,  -2.33128563],
       [  7.45819487, 155.        ,   0.94694468],
       [ 49.83478271, 208.        ,   2.66720415]])
    #load hills
    h1 = mm.Hills(name="./data/acealanme1d", periodic=[False])
    #find minima on FES
    minima = mm.Minima(mm.Fes(h1, resolution=256, original=False))
    minima = minima.minima.to_numpy()
    minima = minima[:,1:].astype(float)
    assert(np.allclose(minima, expected, 1e-3))

def test_2p():
    expected = np.array([[  0.        ,  77.        , 235.        ,  -1.25172832,
          2.62617511],
       [  1.56530383,  27.        , 239.        ,  -2.47891295,
          2.72434988],
       [  1.72589888,  73.        , 117.        ,  -1.34990309,
         -0.26998062],
       [  4.32504971,  32.        , 128.        ,  -2.35619449,
          0.        ],
       [  6.93646316, 165.        , 150.        ,   0.90811663,
          0.53996124],
       [ 13.4725794 , 169.        , 250.        ,   1.0062914 ,
          2.9943305 ]])
    #load hills
    h2 = mm.Hills(name="./data/acealanme", periodic=[True, True])
    #find minima on FES
    minima = mm.Minima(mm.Fes(h2, resolution=256, original=False))
    minima = minima.minima.to_numpy()
    minima = minima[:,1:].astype(float)
    assert(np.allclose(minima, expected, 1e-3))

def test_2np():
    expected = np.array([[ 0.00000000e+00,  8.50000000e+01,  1.17000000e+02,
        -1.32485170e+00, -2.86315644e-01],
       [ 9.36200362e-01,  8.70000000e+01,  2.00000000e+02,
        -1.25993660e+00,  2.40757264e+00],
       [ 3.41083324e+00,  5.60000000e+01,  1.27000000e+02,
        -2.26612074e+00,  3.82492092e-02],
       [ 4.34664163e+00,  5.40000000e+01,  2.02000000e+02,
        -2.33103585e+00,  2.47248561e+00],
       [ 5.13141189e+00,  1.54000000e+02,  1.42000000e+02,
         9.14719466e-01,  5.25096489e-01],
       [ 1.65165716e+01,  1.52000000e+02,  5.20000000e+01,
         8.49804360e-01, -2.39598719e+00],
       [ 1.72168678e+01,  5.30000000e+01,  4.70000000e+01,
        -2.36349340e+00, -2.55826962e+00],
       [ 1.73334026e+01,  1.59000000e+02,  2.02000000e+02,
         1.07700723e+00,  2.47248561e+00],
       [ 1.78932521e+01,  7.70000000e+01,  4.70000000e+01,
        -1.58451213e+00, -2.55826962e+00],
       [ 4.64629534e+01,  2.11000000e+02,  2.03000000e+02,
         2.76480000e+00,  2.50494209e+00],
       [ 5.03204961e+01,  2.11000000e+02,  1.07000000e+02,
         2.76480000e+00, -6.10880497e-01],
       [ 6.33847972e+01,  2.12000000e+02,  4.20000000e+01,
         2.79725755e+00, -2.72055204e+00]])
    #load hills
    h2 = mm.Hills(name="./data/acealanme", periodic=[False,False])
    #find minima on FES
    minima = mm.Minima(mm.Fes(h2, resolution=256, original=False))
    minima = minima.minima.to_numpy()
    minima = minima[:,1:].astype(float)
    assert(np.allclose(minima, expected, 1e-4))
    
def test_3p():
    expected = np.array([[ 0.        , 18.        , 58.        , 63.        , -1.37444679,
         2.55254403,  3.04341788],
       [ 1.32042671,  6.        , 59.        , 63.        , -2.55254403,
         2.6507188 ,  3.04341788],
       [ 1.47385975, 18.        , 29.        ,  0.        , -1.37444679,
        -0.29452431, -3.14159265],
       [ 7.20748843,  7.        , 37.        , 63.        , -2.45436926,
         0.49087385,  3.04341788],
       [ 7.45375452, 41.        , 36.        ,  0.        ,  0.88357293,
         0.39269908, -3.14159265],
       [13.49215181, 42.        , 63.        ,  0.        ,  0.9817477 ,
         3.04341788, -3.14159265],
       [17.55691372, 20.        , 59.        , 31.        , -1.17809725,
         2.6507188 , -0.09817477],
       [18.1065248 ,  4.        , 59.        , 32.        , -2.74889357,
         2.6507188 ,  0.        ],
       [25.22676999,  6.        , 44.        , 32.        , -2.55254403,
         1.17809725,  0.        ],
       [28.33618461, 40.        , 42.        , 32.        ,  0.78539816,
         0.9817477 ,  0.        ],
       [29.22962332, 19.        , 25.        , 30.        , -1.27627202,
        -0.68722339, -0.19634954],
       [31.77078665, 43.        , 59.        , 31.        ,  1.07992247,
         2.6507188 , -0.09817477],
       [38.86168828,  5.        , 24.        , 30.        , -2.6507188 ,
        -0.78539816, -0.19634954],
       [56.35781511, 41.        , 11.        , 32.        ,  0.88357293,
        -2.06167018,  0.        ]])
    #load hills
    h3 = mm.Hills(name="./data/acealanme3d", periodic=[True,True,True])
    #find minima on FES
    minima = mm.Minima(mm.Fes(h3, resolution=64, original=False))
    minima = minima.minima.to_numpy()
    minima = minima[:,1:].astype(float)
    assert(np.allclose(minima, expected, 1e-4))

def test_3np():
    expected = np.array([[ 0.        , 22.        , 27.        , 10.        , -1.22765671,
        -0.57836903, -2.78568028],
       [ 1.11794501, 22.        , 50.        , 10.        , -1.22765671,
         2.40760738, -2.78568028],
       [ 1.283104  , 21.        , 28.        , 52.        , -1.35749173,
        -0.44854397,  2.66739778],
       [ 1.73803501, 23.        , 50.        , 51.        , -1.09782168,
         2.40760738,  2.53756259],
       [ 3.1587747 , 15.        , 32.        , 52.        , -2.13650186,
         0.07075627,  2.66739778],
       [ 3.59570002, 23.        , 50.        , 31.        , -1.09782168,
         2.40760738, -0.05914125],
       [ 3.65365204, 13.        , 50.        , 10.        , -2.3961719 ,
         2.40760738, -2.78568028],
       [ 4.06980847, 12.        , 50.        , 52.        , -2.52600692,
         2.40760738,  2.66739778],
       [ 5.37004323, 13.        , 51.        , 31.        , -2.3961719 ,
         2.53743244, -0.05914125],
       [ 5.84688038, 38.        , 35.        , 10.        ,  0.84970364,
         0.46023146, -2.78568028],
       [ 6.24529145, 38.        , 35.        , 52.        ,  0.84970364,
         0.46023146,  2.66739778],
       [10.40662302, 13.        , 41.        , 31.        , -2.3961719 ,
         1.23918182, -0.05914125],
       [12.58771731, 37.        , 39.        , 32.        ,  0.71986861,
         0.9795317 ,  0.07069394],
       [13.7311009 , 22.        , 26.        , 30.        , -1.22765671,
        -0.7081941 , -0.18897644],
       [14.72170711, 18.        , 11.        , 10.        , -1.74699679,
        -2.65557001, -2.78568028],
       [15.6113693 , 13.        , 11.        , 52.        , -2.3961719 ,
        -2.65557001,  2.66739778],
       [15.89627038, 38.        , 12.        , 10.        ,  0.84970364,
        -2.52574495, -2.78568028],
       [16.13723904, 40.        , 50.        , 52.        ,  1.10937368,
         2.40760738,  2.66739778],
       [16.25283494, 38.        , 12.        , 52.        ,  0.84970364,
        -2.52574495,  2.66739778],
       [17.28029937, 19.        , 11.        , 52.        , -1.61716177,
        -2.65557001,  2.66739778],
       [17.50335651, 39.        , 50.        , 10.        ,  0.97953866,
         2.40760738, -2.78568028],
       [18.18539289, 39.        , 51.        , 31.        ,  0.97953866,
         2.53743244, -0.05914125],
       [18.5333971 , 13.        , 11.        , 10.        , -2.3961719 ,
        -2.65557001, -2.78568028],
       [23.36118873, 12.        , 26.        , 30.        , -2.52600692,
        -0.7081941 , -0.18897644],
       [34.53694143, 12.        ,  9.        , 28.        , -2.52600692,
        -2.91522014, -0.44864682],
       [35.94043498, 18.        ,  9.        , 28.        , -1.74699679,
        -2.91522014, -0.44864682],
       [38.8081566 , 53.        , 50.        ,  9.        ,  2.79722896,
         2.40760738, -2.91551547],
       [38.84173306, 39.        ,  9.        , 29.        ,  0.97953866,
        -2.91522014, -0.31881163],
       [39.15049199, 53.        , 51.        , 53.        ,  2.79722896,
         2.53743244,  2.79723297],
       [40.56072344, 38.        , 15.        , 32.        ,  0.84970364,
        -2.13626977,  0.07069394],
       [42.06407532, 53.        , 28.        , 53.        ,  2.79722896,
        -0.44854397,  2.79723297],
       [43.92191805, 54.        , 51.        , 31.        ,  2.92706398,
         2.53743244, -0.05914125],
       [44.11802158, 53.        , 26.        ,  9.        ,  2.79722896,
        -0.7081941 , -2.91551547],
       [49.46507416, 54.        , 10.        ,  9.        ,  2.92706398,
        -2.78539508, -2.91551547],
       [50.16379785, 54.        ,  9.        , 53.        ,  2.92706398,
        -2.91522014,  2.79723297],
       [51.43460386, 54.        , 25.        , 31.        ,  2.92706398,
        -0.83801916, -0.05914125],
       [53.22375352, 54.        ,  7.        , 27.        ,  2.92706398,
        -3.17487026, -0.57848202]])
    #load hills
    h3 = mm.Hills(name="./data/acealanme3d", periodic=[False,False,False])
    #find minima on FES
    minima = mm.Minima(mm.Fes(h3, resolution=64, original=False))
    minima = minima.minima.to_numpy()
    minima = minima[:,1:].astype(float)
    assert(np.allclose(minima, expected, 1e-4))

if __name__ == '__main__':
    pytest.main([__file__])
